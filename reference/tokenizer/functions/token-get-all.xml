<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 82c84a325ea8d03f45669988e4f6ed53221ebd8f Maintainer: marcogrossisas Status: ready -->
<refentry xml:id="function.token-get-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>token_get_all</refname>
  <refpurpose>Divide la fuente dada en tokens PHP</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>token_get_all</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>token_get_all</function> parsea el string de la <parameter>source</parameter> dada
   en tokens PHP usando el escaneador de léxico de Zend Engine.
  </para>
  <para>
   Para ver la lista de los tokens analizados, vea <xref linkend="tokens"/>, o use 
   <function>token_name</function> para traducir un valor token en su representación en string.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>source</parameter></term>
     <listitem>
      <para>
       La fuente PHP a analizar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Banderas válidas:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>TOKEN_PARSE</constant> - Reconoce la capacidad de usar palabras reservadas en contextos específicos.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Valores válidos:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>TOKEN_PARSE</constant> - Reconoce la capacidad de usar
           palabras reservadas en contextos específicos.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un array de tokens identificadores. Cada token identificador individual es al 
   mismo tiempo un carácter único (por ejemplo: <literal>;</literal>, <literal>.</literal>, 
   <literal>&gt;</literal>, <literal>!</literal>, etc...),
   un array de tres elementos conteniendo el índice de token en el elemento 0, el contenido
   del string del token original en el elemento 1 y el número de línea en el elemento 2.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>token_get_all</function> ejemplos</title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('<?php echo; ?>');

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo "Line {$token[2]}: ", token_name($token[0]), " ('{$token[1]}')", PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Line 1: T_OPEN_TAG ('<?php ')
Line 1: T_ECHO ('echo')
Line 1: T_WHITESPACE (' ')
Line 1: T_CLOSE_TAG ('?>')
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>token_get_all</function> ejemplo de uso incorrecto</title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('/* comment */');

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo "Line {$token[2]}: ", token_name($token[0]), " ('{$token[1]}')", PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Line 1: T_INLINE_HTML ('/* comment */')
]]>
    </screen>
   </example>
   Ten en cuenta en el ejemplo anterior que la cadena se analiza como
   <constant>T_INLINE_HTML</constant> en lugar del esperado
   <constant>T_COMMENT</constant>. Esto se debe a que no se utilizó ninguna etiqueta de apertura en el
   código proporcionado. Esto sería equivalente a colocar un comentario fuera de las
   etiquetas PHP en un archivo normal.
  </para>
  <para>
   <example>
    <title><function>token_get_all</function> en un ejemplo de clase que usa una palabra reservada</title>
    <programlisting role="php">
<![CDATA[
<?php

$source = <<<'code'
<?php

class A
{
    const PUBLIC = 1;
}
code;

$tokens = token_get_all($source, TOKEN_PARSE);

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo token_name($token[0]) , PHP_EOL;
    }
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
T_OPEN_TAG
T_WHITESPACE
T_CLASS
T_WHITESPACE
T_STRING
T_CONST
T_WHITESPACE
T_STRING
T_LNUMBER
]]>
    </screen>
   </example>
   Sin la bandera <constant>TOKEN_PARSE</constant>, el penúltimo
   token (<constant>T_STRING</constant>) habría sido
   <constant>T_PUBLIC</constant>.
  </para>
  <para>
   <example>
    <title>
     ejemplo de <function>token_get_all</function> usado en una clase con una palabra reservada
    </title>
    <programlisting role="php">
<![CDATA[
<?php

$source = <<<'code'
<?php

class A
{
    const PUBLIC = 1;
}
code;

$tokens = token_get_all($source, TOKEN_PARSE);

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo token_name($token[0]) , PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
T_OPEN_TAG
T_WHITESPACE
T_CLASS
T_WHITESPACE
T_STRING
T_CONST
T_WHITESPACE
T_STRING
T_LNUMBER
]]>
    </screen>
   </example>
   Sin el uso de <constant>TOKEN_PARSE</constant>, el penúltimo token (<constant>T_STRING</constant>) hubiese sido 
   <constant>T_PUBLIC</constant>.
  </para>
 </refsect1>
<refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PhpToken::tokenize</function></member>
    <member><function>token_name</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
